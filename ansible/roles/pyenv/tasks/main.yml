---
# tasks file for roles/pyenv
- name: check exists .python-version
  stat:
    path: "{{ deploy_path }}/.python-version"
  register: check_exists_python_version

- name: Remove .python-version
  file:
    path: "{{ deploy_path }}/.python-version"
    state: absent
  when: check_exists_python_version.stat.exists

- name: check installed pyenv
  command: bash -lc "pyenv --version"
  register: pyenv_exists
  changed_when: False
  ignore_errors: yes

# OS branch start
- include: centos7.yml
  when:
    - ansible_distribution == "CentOS"
    - ansible_distribution_major_version == "7"
    - pyenv_exists is failed
    - pyenv_state == "present"

- include: ubuntu18.yml
  when:
    - ansible_distribution == "Ubuntu"
    - ansible_distribution_major_version == "18"
    - pyenv_exists is failed
    - pyenv_state == "present"

# OS branch end

- name: pybyenv git clone
  git:
    repo: https://github.com/yyuu/pyenv.git
    dest: "{{ pyenv_path }}"
  when:
    - pyenv_exists is failed
    - pyenv_state == "present"

- name: remove check pyenv
  stat:
    path: "{{ pyenv_path }}"
  register: chk_dir
  changed_when: False
  ignore_errors: yes

- name: remove pyenv
  command: bash -lc "rm -rf {{ pyenv_path }}"
  when:
    - chk_dir.stat.exists is true
    - pyenv_state == "absent"

- name: Path for bashrc
  blockinfile:
    dest: "{{ home_path }}/{{ shell_profile }}"
    create: yes
    insertafter: '^PATH=\$PATH:\$HOME/bin$'
    marker: "# {mark} ANSIBLE pyenv"
    state: "{{ pyenv_state }}"
    block: |
      export PYENV_ROOT={{ pyenv_path }}
      export PATH="$PYENV_ROOT/bin:$PATH"
      eval "$(pyenv init -)"
      eval "$(pyenv virtualenv-init -)"
  when: ( pyenv_exists is failed and pyenv_state == "present") or
    ( pyenv_exists is not failed and pyenv_state == "absent")


- name: Check installed python
  shell: bash -lc "pyenv versions | grep {{ python_version }}"
  register: pyenv_check_install
  changed_when: False
  ignore_errors: yes

- name: Install python when not installed
  command: bash -lc "pyenv install {{ python_version }}"
  when:
    - pyenv_exists is failed
    - pyenv_state == "present"
  args:
    creates: "{{ pyenv_path }}/versions/{{ python_version }}"

- name: Check python global
  shell: bash -lc "pyenv version | grep {{ python_version }}"
  register: pyenv_check_default
  changed_when: False
  ignore_errors: yes

- name: Set python global version
  command: bash -lc "pyenv global {{ python_version }}"
  when:
    - pyenv_exists is failed
    - pyenv_state == "present"

- name: pyenv-virtualenv git clone
  git:
    repo: https://github.com/yyuu/pyenv-virtualenv.git
    dest: "{{ pyenv_path }}/plugins/pyenv-virtualenv"
  when:
    - pyenv_exists is failed
    - pyenv_state == "present"

#- name: Install pyenv-virtualenv
#  command: bash -lc "pip install virtualenv virtualenvwrapper"
#  when:
#    - pyenv_exists is failed
#    - pyenv_state == "present"

- name: pip upgrade
  command: bash -lc "pip install --upgrade pip"
  when:
    - pyenv_exists is failed
    - pyenv_state == "present"
