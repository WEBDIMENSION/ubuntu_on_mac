---
# tasks file for roles/rbenv

- name: check installed rbenv
  command: bash -lc "rbenv --version"
  register: rbenv_exists
  changed_when: False
  ignore_errors: yes

# OS branch start
- include: centos7.yml
  when:
   - rbenv_exists is failed
   - ansible_distribution == "CentOS"
   - ansible_distribution_major_version == "7"

- include: ubuntu18.yml
  when:
   - rbenv_exists is failed
   - ansible_distribution == "Ubuntu"
   - ansible_distribution_major_version == "18"

# OS branch wnd
- name: rubyenv install when not installed
  git:
    repo: https://github.com/sstephenson/rbenv.git
    dest: "{{ rbenv_path }}"
  when: rbenv_exists is failed

- name: install ruby-build
  git:
    repo: https://github.com/sstephenson/ruby-build.git
    dest: "{{ rbenv_path }}/plugins/ruby-build"
  when: rbenv_exists is failed

- name: before rbenv install
  # exec root
  become: true
  command: bash -lc "{{ rbenv_path }}/plugins/ruby-build/install.sh"
  when:  rbenv_exists is failed

- name: ENV for bashrc
  blockinfile:
    dest: "{{ home_path }}/{{ shell_profile }}"
    create: yes
    insertafter: '^PATH=\$PATH:\$HOME/bin$'
    marker: "# {mark} ANSIBLE rbenv "
    content: |
      export RBENV_ROOT={{ rbenv_path }}
      export PATH="$RBENV_ROOT/bin:$PATH"
      eval "$(rbenv init -)"
  when: rbenv_exists is failed

- name: Check installed ruby
  shell: bash -lc "rbenv versions | grep {{ ruby_version }}"
  register: rbenv_check_install
  changed_when: False
  ignore_errors: yes

- name: Install ruby when not installed
  command: bash -lc "rbenv install {{ ruby_version }}"
  args:
    creates: "{{ rbenv_path }}/versions/{{ ruby_version }}"
  when: rbenv_check_install is failed

- name: Check ruby global
  shell: bash -lc "rbenv version | grep {{ ruby_version }}"
  register: rbenv_check_default
  changed_when: False
  ignore_errors: yes

- name: debug result ruby version
  debug:
    msg: "{{ rbenv_check_default }}"
  changed_when: False
  ignore_errors: yes

- name: Set ruby global version
  command: bash -lc "rbenv global {{ ruby_version }}"
  when: rbenv_check_default is failed

- name: debug which gem
  debug:
    msg: "{{ which_gem }}"
  changed_when: False
  ignore_errors: yes

# tasks file for bundle
- name: Check gems installed
  shell: >-
    bash -lc "gem list | grep {{ item.name }}
    {% if item.version is defined %}
     | grep '({{ item.version }}[).]'
    {%- endif -%}
     | wc -l"
  register: check_gem_install
  changed_when: False
  ignore_errors: yes
  check_mode: no
  with_items: "{{ gems | default([]) }}"

- name: Save Checking gems results
  set_fact:
    gem_chk: >-
      {%- set cnt = [] -%}
      {%- for i in check_gem_install.results -%}
      {%-   if i.stdout == "0" -%}
      {%-     set _ = cnt.append(i.stdout) -%}
      {%-   endif -%}
      {%- endfor -%}
      {{ cnt | length }}
  changed_when: False


- name: Install gems
  shell: >-
    bash -lc "gem install {{ item.name }}
    {% if item.version is defined %}
     -v {{ item.version }}
    {%- endif %}"
  register: result
  until: result.rc == 0
  #retries: 5
  #delay: 10
  #ignore_errors: yes
  with_items: "{{ gems | default([]) }}"
  when:  gem_chk != "0"
